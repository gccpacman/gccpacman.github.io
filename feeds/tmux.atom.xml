<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pacman News - Tmux</title><link href="https://gccpacman.github.io/" rel="alternate"></link><link href="https://gccpacman.github.io/feeds/tmux.atom.xml" rel="self"></link><id>https://gccpacman.github.io/</id><updated>2018-08-28T10:20:00+08:00</updated><entry><title>putty + tmux多窗口可用配置</title><link href="https://gccpacman.github.io/putty-tmuxduo-chuang-kou-ke-yong-pei-zhi.html" rel="alternate"></link><published>2018-08-28T10:20:00+08:00</published><updated>2018-08-28T10:20:00+08:00</updated><author><name>r341h</name></author><id>tag:gccpacman.github.io,2018-08-28:/putty-tmuxduo-chuang-kou-ke-yong-pei-zhi.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;putty的执行命令填入如下命令，tmux名称同session名称，以便开多个putty窗口时候识别&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tmux new -A -s &lt;span class="o"&gt;{&lt;/span&gt;session_name&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加.tmux.conf配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;
##########################################
# STATUS BAR
set -g status-keys vi
set -g status-interval 1
set -g status-attr bright
set -g status-fg white
set -g status-bg black
set -g status-left-length 20
set -g status-left &amp;#39;#[fg=green][#[fg=red]#S#[fg=green]]#[default]&amp;#39;
set …&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;putty的执行命令填入如下命令，tmux名称同session名称，以便开多个putty窗口时候识别&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tmux new -A -s &lt;span class="o"&gt;{&lt;/span&gt;session_name&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加.tmux.conf配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;
##########################################
# STATUS BAR
set -g status-keys vi
set -g status-interval 1
set -g status-attr bright
set -g status-fg white
set -g status-bg black
set -g status-left-length 20
set -g status-left &amp;#39;#[fg=green][#[fg=red]#S#[fg=green]]#[default]&amp;#39;
set -g status-justify centre
set -g status-right &amp;#39;#[fg=green][ %m/%d %H:%M:%S ]#[default]&amp;#39;
setw -g window-status-current-format &amp;#39;#[fg=yellow](#I.#P#F#W)#[default]&amp;#39;
setw -g window-status-format &amp;#39;#I#F#W&amp;#39;

##########################################
# TERMINAL EMULATOR TITLES
set -g set-titles on
set -g set-titles-string \&amp;quot;#(tmux ls | awk -F: &amp;#39;{print $1}&amp;#39; | xargs | sed &amp;#39;s/\ / | /g&amp;#39;)\&amp;quot;

# Scroll History
set -g history-limit 30000

# Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on

# Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access.
set -s escape-time 50
&amp;quot; &amp;gt; .tmux.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（可选）Shell标题控制， 在.profile文件里添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;look_for_cmd=0
print_cmd() {
  if [ &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;look_for_cmd&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; = 1 ] ;then
    if [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASH_COMMAND&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; != &amp;#39;print_host&amp;#39; ] ;then
      cmdline=$(history 1 | xargs | cut -d\  -f3-)
      if [[ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; =~ ^(sudo|ssh|vi|man|more|less)\  ]] ;then
        first=$(echo &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; | awk &amp;#39;{print $1}&amp;#39;)
        for i in &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; ;do
          if ! [[ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; =~ ^-.*$ ]] &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ! [[ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; =~ ^&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;$ ]] ;then
            cmd=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;[&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;]&amp;quot;
            break
          fi
        done
      elif [[ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; =~ ^[A-Z]*=.*$ ]] ;then
        cmd=$(echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; | awk &amp;#39;{print $2}&amp;#39;)
      else
        cmd=$(echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; | awk &amp;#39;{print $1}&amp;#39;)
      fi
      echo -ne &amp;quot;\033k&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\033\\&amp;quot; 1&amp;gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;2
      look_for_cmd=0
    else
      return
    fi
  fi
}

print_host() {
  echo -ne &amp;quot;\033k&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOSTNAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\033\\&amp;quot; 1&amp;gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;2
  look_for_cmd=1
}

PROMPT_COMMAND=&amp;quot;print_host&amp;quot;

trap &amp;quot;print_cmd&amp;quot; DEBUG
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</content><category term="tmux"></category><category term="putty"></category></entry><entry><title>Tmux的复制和黏贴</title><link href="https://gccpacman.github.io/tmuxde-fu-zhi-he-nian-tie.html" rel="alternate"></link><published>2015-10-29T10:20:00+08:00</published><updated>2015-10-29T10:20:00+08:00</updated><author><name>r341h</name></author><id>tag:gccpacman.github.io,2015-10-29:/tmuxde-fu-zhi-he-nian-tie.html</id><summary type="html">&lt;p&gt;tmux确实是一个吊炸的东西，功能和那个和他类似的鼻祖screen相比，确实多出了不少。比如他又一个可以对终端的内容进行复制和黏贴的功能。
这里假定你设置的快捷键前缀是Ctrl+a:
进行复制的操作是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ctrl+a [&lt;/code&gt;开始复制&lt;/li&gt;
&lt;li&gt;把光标移动到开始复制的位置(上下左右键，或者Ctrl+n/p/b/f键移动光标)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Space&lt;/code&gt;  开始选择内容，类似vim的按下V的效果&lt;/li&gt;
&lt;li&gt;完成选择，&lt;code&gt;Alt+w&lt;/code&gt; 完成复制&lt;/li&gt;
&lt;li&gt;然后到你想要黏贴的地方， &lt;code&gt;Ctrl+a ]&lt;/code&gt; 黏贴成功&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是， Ctrl+space在windows和linux的某些桌面环境下，都是输入法切换键，所以如果这个方法不成功，很可能是因为快捷键冲突的原因了。那么解决方法一个是把冲突的快捷键解决掉，另一个这是通过配置.tmux.conf。其实上面的快捷键默认的快捷键，模仿的按键是emacs，因为我不用emacs（因为我不用emacs，所以也只觉得很不习惯)，其实还有另外的一种快捷键模式是模仿vim的，不过需要你在tmux配置文件里配置一下, 把下面这行加入.tmux.conf里:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set-window-option …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;tmux确实是一个吊炸的东西，功能和那个和他类似的鼻祖screen相比，确实多出了不少。比如他又一个可以对终端的内容进行复制和黏贴的功能。
这里假定你设置的快捷键前缀是Ctrl+a:
进行复制的操作是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ctrl+a [&lt;/code&gt;开始复制&lt;/li&gt;
&lt;li&gt;把光标移动到开始复制的位置(上下左右键，或者Ctrl+n/p/b/f键移动光标)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Space&lt;/code&gt;  开始选择内容，类似vim的按下V的效果&lt;/li&gt;
&lt;li&gt;完成选择，&lt;code&gt;Alt+w&lt;/code&gt; 完成复制&lt;/li&gt;
&lt;li&gt;然后到你想要黏贴的地方， &lt;code&gt;Ctrl+a ]&lt;/code&gt; 黏贴成功&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是， Ctrl+space在windows和linux的某些桌面环境下，都是输入法切换键，所以如果这个方法不成功，很可能是因为快捷键冲突的原因了。那么解决方法一个是把冲突的快捷键解决掉，另一个这是通过配置.tmux.conf。其实上面的快捷键默认的快捷键，模仿的按键是emacs，因为我不用emacs（因为我不用emacs，所以也只觉得很不习惯)，其实还有另外的一种快捷键模式是模仿vim的，不过需要你在tmux配置文件里配置一下, 把下面这行加入.tmux.conf里:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set-window-option -g mode-keys vi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置成这样以后，重新载入配置（可以用&lt;code&gt;ctrl+a :&lt;/code&gt;然后输入&lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;然后复制黏贴的操作就变成了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ctrl+a [&lt;/code&gt;开始复制&lt;/li&gt;
&lt;li&gt;把光标移动到开始复制的位置(上下左右键，或者Ctrl+n/p/b/f键移动光标)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Space&lt;/code&gt;  开始选择内容，类似vim的按下V的效果&lt;/li&gt;
&lt;li&gt;完成选择，&lt;code&gt;Enter&lt;/code&gt; 完成复制&lt;/li&gt;
&lt;li&gt;然后到你想要黏贴的地方， &lt;code&gt;Ctrl+a ]&lt;/code&gt; 黏贴成功&lt;/li&gt;
&lt;/ol&gt;</content><category term="tmux"></category><category term="linux"></category></entry></feed>