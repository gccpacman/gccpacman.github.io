<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pacman News</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2018-05-04T19:30:00+08:00</updated><entry><title>资源占用超级低的i3桌面</title><link href="/zi-yuan-zhan-yong-chao-ji-di-de-i3zhuo-mian.html" rel="alternate"></link><published>2018-05-04T10:20:00+08:00</published><updated>2018-05-04T19:30:00+08:00</updated><author><name>r341h</name></author><id>tag:None,2018-05-04:/zi-yuan-zhan-yong-chao-ji-di-de-i3zhuo-mian.html</id><summary type="html">&lt;p&gt;现在的电脑是Surface，跑虚拟机很吃力了，但是不是不能跑，重点是优化后把linux的资源降下来，还是可以非常流畅。i3是个比xfce4更加轻量级的桌面管理器，而且不是像Windows那样悬浮窗口式的，而是tiling的桌面。随便网上找了个截图，大概就是这个意思：&lt;/p&gt;
&lt;p&gt;&lt;img alt="i3" src="https://i3wm.org/screenshots/i3-1.png"&gt;&lt;/p&gt;
&lt;h1&gt;这边的例子以Vmware为例：&lt;/h1&gt;
&lt;h2&gt;1. 首先要安装i3：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install i3   &lt;span class="c1"&gt;# centos&lt;/span&gt;
$ sudo apt install i3   &lt;span class="c1"&gt;# debian &amp;amp; ubuntu&lt;/span&gt;
$ sudo pacman -S i3     &lt;span class="c1"&gt;# archlinux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 备份并修改i3的配置文件，可以参考我的github，或者直接下载替换：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp ~/.config/i3/config ~/.config/i3/config.bak
wget https://raw.githubusercontent.com/gccpacman/vm-i3wm-config/master/config …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;现在的电脑是Surface，跑虚拟机很吃力了，但是不是不能跑，重点是优化后把linux的资源降下来，还是可以非常流畅。i3是个比xfce4更加轻量级的桌面管理器，而且不是像Windows那样悬浮窗口式的，而是tiling的桌面。随便网上找了个截图，大概就是这个意思：&lt;/p&gt;
&lt;p&gt;&lt;img alt="i3" src="https://i3wm.org/screenshots/i3-1.png"&gt;&lt;/p&gt;
&lt;h1&gt;这边的例子以Vmware为例：&lt;/h1&gt;
&lt;h2&gt;1. 首先要安装i3：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install i3   &lt;span class="c1"&gt;# centos&lt;/span&gt;
$ sudo apt install i3   &lt;span class="c1"&gt;# debian &amp;amp; ubuntu&lt;/span&gt;
$ sudo pacman -S i3     &lt;span class="c1"&gt;# archlinux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 备份并修改i3的配置文件，可以参考我的github，或者直接下载替换：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp ~/.config/i3/config ~/.config/i3/config.bak
wget https://raw.githubusercontent.com/gccpacman/vm-i3wm-config/master/config
cp config ~/.config/i3/config
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. 因为我的是高分屏，默认vmware不支持，但是可以修改i3的dpi让文字和界面看起来舒服：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;Xft.dpi: 118&amp;quot; &amp;gt;&amp;gt; ~/.Xresources
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4 安装lightdm/gdm后，，设置session成i3，并且因为是虚拟机不想每次开机都输入用户名密码，可以设置自动登陆：&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lightdm&lt;/code&gt;修改&lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[SeatDefaults]&lt;/span&gt;
&lt;span class="na"&gt;autologin-user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;{{your username}}&lt;/span&gt;
&lt;span class="na"&gt;autologin-user-timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;user-session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gdm&lt;/code&gt;修改&lt;code&gt;/etc/gdm3/daemon.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[daemon]&lt;/span&gt;
&lt;span class="na"&gt;AutomaticLoginEnable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;AutomaticLogin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;teotfw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS: 或者直接disable x-manager, 用startx方式启动&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl set-default multi-user.target
echo &amp;quot;exec i3&amp;quot; &amp;gt; ~/.xinitrc
startx # reboot并login后执行
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5. 根据你的系统安装open-vm-tools&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install open-vm-tools   &lt;span class="c1"&gt;# centos&lt;/span&gt;
$ sudo apt install open-vm-tools   &lt;span class="c1"&gt;# debian &amp;amp; ubuntu&lt;/span&gt;
$ sudo pacman -S open-vm-tools     &lt;span class="c1"&gt;# archlinux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6. 如果你无法加载open-vm-tools, 则需要做如下配置：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp ~/.xsession ~/.xsession.bak
echo &amp;quot;#!/bin/sh
xrandr
exec i3&amp;quot; &amp;gt; ~/.xsession
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="vim"></category><category term="gtk"></category><category term="vitual machine"></category></entry><entry><title>Windows安装MSys32配置Git等开发环境并集成VSCode</title><link href="/windowsan-zhuang-msys32pei-zhi-gitdeng-kai-fa-huan-jing-bing-ji-cheng-vscode.html" rel="alternate"></link><published>2018-02-01T10:20:00+08:00</published><updated>2018-02-01T19:30:00+08:00</updated><author><name>r341h</name></author><id>tag:None,2018-02-01:/windowsan-zhuang-msys32pei-zhi-gitdeng-kai-fa-huan-jing-bing-ji-cheng-vscode.html</id><summary type="html">&lt;p&gt;在不久之前发现了Msys2，基于Cygwin但是却又有一个让我觉得无比美好的包管理器Pacman(和Arch Linux的一样)，于是决定试试。但是真的用于Windows的终端还有很多麻烦的地方要解决，主要是以下几点：
1. Git的ssh_keygen配置，你和windows自己的CMD里的ssh_keygen能否共用
2. Msys用的换行符是和Linux一样的LF，而Windows的是CRLF
3. Python能不能直接用Windows的Python而不用模拟Unix环境的Python（有很多的bug）
4. 能否和我目前用的最多的VSCode编辑器无缝集成&lt;/p&gt;
&lt;p&gt;经过一段时间的研究，每个问题都得到了很好的解决，目前来讲非常的完美，在这里分享一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载并安装 &lt;a href="http://www.msys2.org/"&gt;Msys2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装和配置 &lt;code&gt;git&lt;/code&gt;, 配置在windows上check出crlf格式文本，提交lf格式:&lt;/p&gt;
&lt;p&gt;2.1 安装git：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pacman --needed -S bash pacman msys2-runtime  git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.2 修改git处理回车的方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global core.autocrlf &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改Home目录路径, Msys2默认的Home目录是Mingw64的/home …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;在不久之前发现了Msys2，基于Cygwin但是却又有一个让我觉得无比美好的包管理器Pacman(和Arch Linux的一样)，于是决定试试。但是真的用于Windows的终端还有很多麻烦的地方要解决，主要是以下几点：
1. Git的ssh_keygen配置，你和windows自己的CMD里的ssh_keygen能否共用
2. Msys用的换行符是和Linux一样的LF，而Windows的是CRLF
3. Python能不能直接用Windows的Python而不用模拟Unix环境的Python（有很多的bug）
4. 能否和我目前用的最多的VSCode编辑器无缝集成&lt;/p&gt;
&lt;p&gt;经过一段时间的研究，每个问题都得到了很好的解决，目前来讲非常的完美，在这里分享一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载并安装 &lt;a href="http://www.msys2.org/"&gt;Msys2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装和配置 &lt;code&gt;git&lt;/code&gt;, 配置在windows上check出crlf格式文本，提交lf格式:&lt;/p&gt;
&lt;p&gt;2.1 安装git：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pacman --needed -S bash pacman msys2-runtime  git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.2 修改git处理回车的方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global core.autocrlf &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改Home目录路径, Msys2默认的Home目录是Mingw64的/home/username, 但是我希望使用windows的Home目录/c/Users/username. 方法是编辑&lt;code&gt;/etc/nsswitch.conf&lt;/code&gt;, 并修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ db_home: windows
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt; Install Python &amp;amp; Pip &lt;/del&gt;&lt;br&gt;
(直接用windows的Python就好，用Mingw64的Python反而可能会有很多问题)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让VSCode里的继承终端（VSCode Integrated Terminal）使用Msys2，在VSCode的settings里加入以下内容:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    {
        &amp;quot;terminal.integrated.shell.windows&amp;quot;: &amp;quot;C:\\msys64\\usr\\bin\\bash.exe&amp;quot;,
        &amp;quot;terminal.integrated.shellArgs.windows&amp;quot;: [
        &amp;quot;--login&amp;quot;,
        ],
        &amp;quot;terminal.integrated.env.windows&amp;quot;: {
        &amp;quot;CHERE_INVOKING&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;MSYSTEM&amp;quot;: &amp;quot;MINGW64&amp;quot;,
    &amp;quot;MSYS2_PATH_TYPE&amp;quot;: &amp;quot;inherit&amp;quot;,
        },
    } 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;https://getpocket.com/a/read/1169705865&lt;/p&gt;
&lt;p&gt;https://help.github.com/articles/dealing-with-line-endings&lt;/p&gt;
&lt;p&gt;https://groups.google.com/forum/#!topic/ustc_lug/_wL4OkWrVK4&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/33942924/how-to-change-home-directory-and-start-directory-on-msys2&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/45836650/how-do-i-integrate-msys2-shell-into-visual-studio-code-on-window/48016561#comment84105772_48016561&lt;/p&gt;</content><category term="windows"></category><category term="shell"></category></entry><entry><title>Linux休眠后唤醒，wifi和蓝牙无法正常使用的解决方法</title><link href="/linuxxiu-mian-hou-huan-xing-wifihe-lan-ya-wu-fa-zheng-chang-shi-yong-de-jie-jue-fang-fa.html" rel="alternate"></link><published>2017-12-04T10:20:00+08:00</published><updated>2017-12-04T19:30:00+08:00</updated><author><name>r341h</name></author><id>tag:None,2017-12-04:/linuxxiu-mian-hou-huan-xing-wifihe-lan-ya-wu-fa-zheng-chang-shi-yong-de-jie-jue-fang-fa.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Manjaro Linux&lt;/code&gt;从&lt;code&gt;17.02&lt;/code&gt;版本开始匹配了Surface Pro 3， 这里必须非常感谢下Manjaro Team的工作，我现在可以再次在Surface上用畅快的用Linux了。&lt;/p&gt;
&lt;p&gt;具体可以看reddit上的这篇文章： https://cd-rw.org/t/running-linux-on-the-surface-pro-3/175/37。&lt;/p&gt;
&lt;p&gt;我实际安装的版本是&lt;code&gt;17.1pre3&lt;/code&gt;，不管是蓝牙，触摸板，WIFI，touchpad，音量键，甚至触摸屏都可以正常使用，甚至都不用升级内核。&lt;/p&gt;
&lt;p&gt;唯一的问题是启用休眠以后，wifi和蓝牙功能失灵了，即使通过重启&lt;code&gt;NetworkManager.service&lt;/code&gt;也无法解决，因此基本上就是硬件驱动的问题，网上关于其他一些笔记本在休眠后无法解决的问题基本上就是用lsmod查到和wifi相关的模块，然后重新加载的方法，但是没有和surface pro有关的内容。&lt;/p&gt;
&lt;p&gt;找了几篇stackoverflow文章做了多次尝试，然后通过&lt;code&gt;lsmod　| grep wifi&lt;/code&gt;和&lt;code&gt;lsmod | grep bluetooth&lt;/code&gt;查出来的模块 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;Manjaro Linux&lt;/code&gt;从&lt;code&gt;17.02&lt;/code&gt;版本开始匹配了Surface Pro 3， 这里必须非常感谢下Manjaro Team的工作，我现在可以再次在Surface上用畅快的用Linux了。&lt;/p&gt;
&lt;p&gt;具体可以看reddit上的这篇文章： https://cd-rw.org/t/running-linux-on-the-surface-pro-3/175/37。&lt;/p&gt;
&lt;p&gt;我实际安装的版本是&lt;code&gt;17.1pre3&lt;/code&gt;，不管是蓝牙，触摸板，WIFI，touchpad，音量键，甚至触摸屏都可以正常使用，甚至都不用升级内核。&lt;/p&gt;
&lt;p&gt;唯一的问题是启用休眠以后，wifi和蓝牙功能失灵了，即使通过重启&lt;code&gt;NetworkManager.service&lt;/code&gt;也无法解决，因此基本上就是硬件驱动的问题，网上关于其他一些笔记本在休眠后无法解决的问题基本上就是用lsmod查到和wifi相关的模块，然后重新加载的方法，但是没有和surface pro有关的内容。&lt;/p&gt;
&lt;p&gt;找了几篇stackoverflow文章做了多次尝试，然后通过&lt;code&gt;lsmod　| grep wifi&lt;/code&gt;和&lt;code&gt;lsmod | grep bluetooth&lt;/code&gt;查出来的模块，依次尝试，终于找到了正确的模块。&lt;/p&gt;
&lt;p&gt;和wifi相关的模块是&lt;code&gt;mwifiex_pcie&lt;/code&gt;， 和蓝牙相关的模块是&lt;code&gt;btusb&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因此要做的操作就是&lt;code&gt;rmmod&lt;/code&gt;和&lt;code&gt;modprobe&lt;/code&gt;，休眠后执行下面的命令后，wifi和蓝牙就可以正常工作了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; sudo rmmod -v btusb
 sudo rmbanbenmod -v mwifiex_pcie
 sudo modprobe -v btusb
 sudo modprobe -v mwifiex_pcie
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是这样就是每次都得再休眠后执行这些命令好像也略麻烦，最后看到又休眠后自动执行脚本的方法，&lt;code&gt;pm&lt;/code&gt;和&lt;code&gt;systemctl&lt;/code&gt;的休眠脚本位置不同，我对&lt;code&gt;pm&lt;/code&gt;没印象，觉得arch的休眠几乎肯定是&lt;code&gt;systemctl&lt;/code&gt;的，于是直接尝试了&lt;code&gt;systemctl&lt;/code&gt;，&lt;code&gt;systemctl&lt;/code&gt;的脚本位置在&lt;code&gt;/usr/lib/systemd/system-sleep&lt;/code&gt;，这里的脚本会在sleep或者休眠时被调用。&lt;/p&gt;
&lt;p&gt;我的脚本&lt;code&gt;/usr/lib/systemd/system-sleep/wakeup_suspend_dev.sh&lt;/code&gt;的内容是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    #!/bin/bash
    case $1 in
        pre)
          rmmod btusb
          rmmod mwifiex_pcie
        ;;
        post)
          modprobe btusb
                modprobe mwifiex_pcie
        ;;
    esac
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pre&lt;/code&gt;是在休眠之前执行&lt;code&gt;rmmod&lt;/code&gt;的操作，post是在休眠之后执行&lt;code&gt;modprobe&lt;/code&gt;的操作。需要注意的是必须把这个脚本加可执行权限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod +x wakeup_suspend_dev.sh
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="drivers"></category></entry><entry><title>vim插件command-t在windows上编译</title><link href="/vimcha-jian-command-tzai-windowsshang-bian-yi.html" rel="alternate"></link><published>2017-10-24T10:20:00+08:00</published><updated>2017-10-24T19:30:00+08:00</updated><author><name>r341h</name></author><id>tag:None,2017-10-24:/vimcha-jian-command-tzai-windowsshang-bian-yi.html</id><summary type="html">&lt;p&gt;用Bundle在Windows平台上配置成功了以后，绝大多数插件都已经可以使用，但是唯独&lt;a href="https://github.com/wincent/Command-T"&gt;Command-T&lt;/a&gt;因为是Ruby集成的插件，需要手动编译。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wincent/command-t/blob/master/doc/command-t.txt"&gt;官方文档&lt;/a&gt;写的安装编译过程代码大概是这样的，我省去了使用bundle的安装过程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/vim&lt;span class="se"&gt;\b&lt;/span&gt;undle&lt;span class="se"&gt;\c&lt;/span&gt;ommand-t&lt;span class="se"&gt;\r&lt;/span&gt;uby&lt;span class="se"&gt;\c&lt;/span&gt;ommand-t&lt;span class="se"&gt;\e&lt;/span&gt;xt&lt;span class="se"&gt;\c&lt;/span&gt;ommand-t&amp;gt;
$ ruby extconf.rb
$ make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要完成这些肯定得装ruby和make，网上的绝大多数答案也都已经过期，说的是vim7.4左右的版本，而现在已经是vim 8.0。于是只好自己探索。&lt;/p&gt;
&lt;p&gt;windows的ruby是一个特殊的安装包，和Ruby的官网都分开，网址是&lt;a href="https://rubyinstaller.org/"&gt;RubyInstaller for windows&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可供下载的版本从2.0.0-p648到2.4.2-2版本。&lt;/p&gt;
&lt;p&gt;我从高版本开始尝试，安装2.4.2-2 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;用Bundle在Windows平台上配置成功了以后，绝大多数插件都已经可以使用，但是唯独&lt;a href="https://github.com/wincent/Command-T"&gt;Command-T&lt;/a&gt;因为是Ruby集成的插件，需要手动编译。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wincent/command-t/blob/master/doc/command-t.txt"&gt;官方文档&lt;/a&gt;写的安装编译过程代码大概是这样的，我省去了使用bundle的安装过程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/vim&lt;span class="se"&gt;\b&lt;/span&gt;undle&lt;span class="se"&gt;\c&lt;/span&gt;ommand-t&lt;span class="se"&gt;\r&lt;/span&gt;uby&lt;span class="se"&gt;\c&lt;/span&gt;ommand-t&lt;span class="se"&gt;\e&lt;/span&gt;xt&lt;span class="se"&gt;\c&lt;/span&gt;ommand-t&amp;gt;
$ ruby extconf.rb
$ make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要完成这些肯定得装ruby和make，网上的绝大多数答案也都已经过期，说的是vim7.4左右的版本，而现在已经是vim 8.0。于是只好自己探索。&lt;/p&gt;
&lt;p&gt;windows的ruby是一个特殊的安装包，和Ruby的官网都分开，网址是&lt;a href="https://rubyinstaller.org/"&gt;RubyInstaller for windows&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可供下载的版本从2.0.0-p648到2.4.2-2版本。&lt;/p&gt;
&lt;p&gt;我从高版本开始尝试，安装2.4.2-2，安装成功并设置好windows环境变量，开始编译。结果发现报错 &lt;code&gt;You have to install development tools first.&lt;/code&gt;. 于是我在官网发现了&lt;code&gt;DEVELOPMENT KIT&lt;/code&gt;可以下载，但是居然只支持（Ruby 2.0 到 2.3），只好重新安装了Ruby 2.3, 并且按照官网development tools。&lt;/p&gt;
&lt;p&gt;假设Ruby 安装到 C:\Ruby22-x64， 配置PATH环境变量。然后将Development tools 就解压到 C:\Ruby22-x64\DevKit, 然后进入该目录执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ruby dk.rb init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;成功后再执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ruby dk.rb install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着进入&lt;code&gt;~/vim\bundle\command-t\ruby\command-t\ext\command-t&amp;gt;&lt;/code&gt;文件夹，执行&lt;code&gt;ruby extconf.rb&lt;/code&gt;命令，发现ruby执行成功了，用choco安装make并执行make一切都顺利。
但是进入vim一按command-t的快捷键报错，报错内容是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;command-t.vim could not load the C extension
Please see INSTALLATION and TROUBLE-SHOOTING in the help
Vim Ruby version: 2.2.6
Expected version: 2.3.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是vim内置的ruby版本和这个版本不匹配，看来我确实遗漏了vim内置版本的问题。于是继续降级到Ruby 2.2, 结果居然还是报错。报错内容依旧是&lt;code&gt;You have to install development tools first.&lt;/code&gt; 然而我明明已经安装了development tools. &lt;/p&gt;
&lt;p&gt;求助google，结果在&lt;a href="https://github.com/OneClick/RubyInstaller/wiki/Development-Kit"&gt;RubyInstaller wiki&lt;/a&gt;
有一段话是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Hacky Developer Scenario – a developer building native gems wants to be able to quickly test that their extconf.rb file used to create a Makefile for the native library works correctly. To shorten the development cycle, the DevKit enables the developer to run &lt;code&gt;ruby -rdevkit extconf.rb&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是我尝试带&lt;code&gt;-rdevkit&lt;/code&gt;参数执行extconf.rb，结果果然通过了，但是make命令却无法通过。继续搜索，发现[AskUbuntu]上有个command-t的问题，没有用官方文档的方法编译command-t而是用了&lt;code&gt;rake make&lt;/code&gt;来编译，我知道rake是ruby的一个工具，在jekyll尝试搭博客的时候用到，但不知道原理。但是反正是编译只要过了就行，于是我就尝试执行&lt;code&gt;rake make&lt;/code&gt;结果还是不信，报错&lt;code&gt;You have to install development tools first.&lt;/code&gt;，但是这样我没有理由不去尝试帮&lt;code&gt;rake make&lt;/code&gt; 带上&lt;code&gt;-rdevkit&lt;/code&gt;这样一个参数，结果居然真的成功了。&lt;/p&gt;
&lt;p&gt;于是迫不及待打开vim，按下command-t的快捷键，一个漂亮的弹窗弹了出来。试着敲了几行，好像没有什么问题，大功告成。&lt;/p&gt;
&lt;p&gt;&lt;img alt="command-t on windows" src="{{ &amp;quot;/assets/images/commandt1.png&amp;quot; | absolute_url }}"&gt;&lt;/p&gt;</content><category term="windows"></category><category term="vim"></category></entry><entry><title>windows的包管理Chocolate和vim.Vundle</title><link href="/windowsde-bao-guan-li-chocolatehe-vimvundle.html" rel="alternate"></link><published>2017-10-22T10:20:00+08:00</published><updated>2017-10-22T19:30:00+08:00</updated><author><name>r341h</name></author><id>tag:None,2017-10-22:/windowsde-bao-guan-li-chocolatehe-vimvundle.html</id><summary type="html">&lt;p&gt;Windows的开发环境一直都会让人比较头疼，一般解决方法有用Cygwin等模拟Linux的环境，Windows 10又自带了Ubuntu On Windows 10的环境。但是都或多或少有点问题，例如Cygwin的文件目录和windows分离，Ubuntu On Windows 10不能用Nodejs，打开X应用比较麻烦，只能用终端等。&lt;/p&gt;
&lt;p&gt;经过很多尝试，我认为最友好的环境还是windows原生的环境，只是你需要偶尔告别命令行搜索某些应用需要的依赖，依次安装，这样其实绝大多数的开发环境都是可以部署的。不过还是有工具可以帮助我们，例如Windows其实也有一个类似apt-get或者&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;的包管理工具，叫做&lt;a href="https://chocolatey.org/"&gt;Chocolate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://chocolatey.org/install"&gt;安装Chocolate&lt;/a&gt;只要在Powershell里写这行代码即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Set-ExecutionPolicy Bypass; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装包的方法是&lt;code&gt;choco install &amp;lt;package_name&amp;gt;&lt;/code&gt; 但是这个命令必须用admin权限的powershell来执行。于是想是不是有个windows的&lt;code&gt;sudo&lt;/code&gt;，结果一查还真的有，而且可以用chocolate安装 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Windows的开发环境一直都会让人比较头疼，一般解决方法有用Cygwin等模拟Linux的环境，Windows 10又自带了Ubuntu On Windows 10的环境。但是都或多或少有点问题，例如Cygwin的文件目录和windows分离，Ubuntu On Windows 10不能用Nodejs，打开X应用比较麻烦，只能用终端等。&lt;/p&gt;
&lt;p&gt;经过很多尝试，我认为最友好的环境还是windows原生的环境，只是你需要偶尔告别命令行搜索某些应用需要的依赖，依次安装，这样其实绝大多数的开发环境都是可以部署的。不过还是有工具可以帮助我们，例如Windows其实也有一个类似apt-get或者&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;的包管理工具，叫做&lt;a href="https://chocolatey.org/"&gt;Chocolate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://chocolatey.org/install"&gt;安装Chocolate&lt;/a&gt;只要在Powershell里写这行代码即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Set-ExecutionPolicy Bypass; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装包的方法是&lt;code&gt;choco install &amp;lt;package_name&amp;gt;&lt;/code&gt; 但是这个命令必须用admin权限的powershell来执行。于是想是不是有个windows的&lt;code&gt;sudo&lt;/code&gt;，结果一查还真的有，而且可以用chocolate安装。于是admin执行powershell并运行了&lt;code&gt;choco install sudo&lt;/code&gt;就安装好了。以后只要在普通用户的powershell执行&lt;code&gt;sudo choco install &amp;lt;package_name&amp;gt;&lt;/code&gt;即可了。&lt;/p&gt;
&lt;p&gt;我用choco安装了&lt;code&gt;git&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;，&lt;code&gt;curl&lt;/code&gt;，&lt;code&gt;wget&lt;/code&gt;等工具，安装后powershell可以执行不少的类似linux的命令了。
但vim是裸奔状态，如果我直接把以前配置的.vimrc文件拿过来，显然用不来，甚至连Vundle包管理都用不来。Vundle的官方文档有&lt;a href="https://github.com/VundleVim/Vundle.vim/wiki/Vundle-for-Windows"&gt;windows上配置的方法&lt;/a&gt;就是把:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set rtp+=$HOME/.vim/bundle/Vundle.vim/
call vundle#begin(&amp;#39;$HOME/.vim/bundle/&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后再执行&lt;code&gt;vim +BundleInstall +qall&lt;/code&gt;就好了。&lt;/p&gt;</content><category term="windows"></category><category term="vim"></category></entry><entry><title>uwsgi方式启动django</title><link href="/uwsgifang-shi-qi-dong-django.html" rel="alternate"></link><published>2015-11-23T10:20:00+08:00</published><updated>2015-11-23T19:30:00+08:00</updated><author><name>r341h</name></author><id>tag:None,2015-11-23:/uwsgifang-shi-qi-dong-django.html</id><summary type="html">&lt;p&gt;没人访问的博客也不是不能升级。不过最近有点懒，趁着睡不着搞了下&lt;code&gt;uwsgi&lt;/code&gt;。
额。平台ubuntu, 你最好有个django项目，假设已经用了&lt;code&gt;virtualenv&lt;/code&gt;，假设已经安装好&lt;code&gt;nginx&lt;/code&gt;并启动服务。&lt;/p&gt;
&lt;p&gt;1）首先安装&lt;code&gt;uwsgi&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2）然后启动， 指定端口号和进程号：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uwsgi -s 127.0.0.1:38803 --http :8000 --module blog.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3) 配置nginx配置文件，放在&lt;code&gt;/etc/nginx/site-enabled/&lt;/code&gt;目录下，注意如果你要用80端口，就不要和其他的例如默认的配置冲突，如果有个default的文件，应该是一个软连接，可以直接删掉。我就直接贴我自己的了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;django&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;127 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;没人访问的博客也不是不能升级。不过最近有点懒，趁着睡不着搞了下&lt;code&gt;uwsgi&lt;/code&gt;。
额。平台ubuntu, 你最好有个django项目，假设已经用了&lt;code&gt;virtualenv&lt;/code&gt;，假设已经安装好&lt;code&gt;nginx&lt;/code&gt;并启动服务。&lt;/p&gt;
&lt;p&gt;1）首先安装&lt;code&gt;uwsgi&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2）然后启动， 指定端口号和进程号：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uwsgi -s 127.0.0.1:38803 --http :8000 --module blog.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3) 配置nginx配置文件，放在&lt;code&gt;/etc/nginx/site-enabled/&lt;/code&gt;目录下，注意如果你要用80端口，就不要和其他的例如默认的配置冲突，如果有个default的文件，应该是一个软连接，可以直接删掉。我就直接贴我自己的了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;django&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;127.0.0.1:38803&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;charset&lt;/span&gt; &lt;span class="err"&gt;utf-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;client_max_body_size&lt;/span&gt; &lt;span class="err"&gt;75M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="err"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;/etc/nginx/uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;alias&lt;/span&gt;   &lt;span class="err"&gt;/webapps/blog/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4) 关于static，你应该在服务器某个地方建个目录(例如我的配置文件是&lt;code&gt;/webapps/blog/static&lt;/code&gt;)，然后配置一下&lt;code&gt;setting.py&lt;/code&gt;里的&lt;code&gt;STATIC_ROOT&lt;/code&gt;成该目录，然后每次static有更改就重新执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py collectstatic.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后尝试一下访问&lt;code&gt;127.0.0.1&lt;/code&gt;，当然如果是远程服务器，就是你的网址了。
看看是否work了吧！&lt;/p&gt;</content><category term="python"></category><category term="django"></category><category term="webapps"></category></entry><entry><title>My super title</title><link href="/my-super-post.html" rel="alternate"></link><published>2010-12-03T10:20:00+08:00</published><updated>2010-12-05T19:30:00+08:00</updated><author><name>Alexis Metaireau</name></author><id>tag:None,2010-12-03:/my-super-post.html</id><summary type="html">&lt;p&gt;Short version for index and feeds&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the content of my super blog post.&lt;/p&gt;</content><category term="pelican"></category></entry></feed>